title: Skupper Hello World with YAML
subtitle: A minimal HTTP application deployed across Kubernetes clusters using Skupper
github_actions_url: https://github.com/ssorj/skupper-example-yaml/actions/workflows/main.yaml
overview: |
  This example is a variant of [Skupper Hello World][hello-world] that
  is deployed using YAML resource definitions instead of imperative
  commands.

  It contains two services:

  * A backend service that exposes an `/api/hello` endpoint.  It
    returns greetings of the form `Hi, <your-name>.  I am <my-name>
    (<pod-name>)`.

  * A frontend service that sends greetings to the backend and
    fetches new greetings in response.

  Skupper enables you place the backend in one cluster and the
  frontend in another and maintain connectivity between the two
  services without exposing the backend to the public internet.

  <img src="images/entities.svg" width="640"/>

  [hello-world]: https://github.com/skupperproject/skupper-example-hello-world
sites:
  west:
    kubeconfig: ~/.kube/config-west
    namespace: west
  east:
    kubeconfig: ~/.kube/config-east
    namespace: east
steps:
  - standard: configure_separate_console_sessions
  - standard: access_your_clusters
  - title: Apply your YAML resources
    preamble: |
      To configure our example sites and service bindings, we are
      using the following resources:

      West:

      * [frontend.yaml](west/frontend.yaml) - The Hello World frontend
      * [skupper.yaml](west/skupper.yaml) - The Skupper controller
      * [site.yaml](west/site.yaml) - Configuration for site `west`

      East:

      * [backend.yaml](east/backend.yaml) - The Hello World backend
      * [skupper.yaml](east/skupper.yaml) - The Skupper controller
      * [site.yaml](east/site.yaml) - Configuration for site `east`

      Let's look at some of these resources in more detail.

      #### Resources in west

      The `site` ConfigMap defines a Skupper site for its associated
      Kubernetes namespace.  This is where you set site configuration
      options.  See the [config reference][config] for more
      information.

      [config]: https://github.com/ssorj/refdog

      [site.yaml](west/site.yaml):

      ~~~ yaml
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: skupper-site
        namespace: west
      data:
        name: west
      ~~~

      #### Resources in east

      Like the one for west, here is the Skupper site definition for
      the east namespace.  It includes the `ingress: "false"` setting
      since no ingress is required at this site for the Hello World
      example.

      [site.yaml](east/site.yaml):

      ~~~ yaml
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: skupper-site
        namespace: east
      data:
        name: east
        ingress: "false"
      ~~~

      In east, the `backend` deployment has an annotation named
      `skupper.io/proxy` with the value `tcp`.  This tells Skupper to
      expose the backend on the Skupper network.  As a consequence,
      the frontend in west will be able to see the backend and call
      its API.

      [backend.yaml](east/backend.yaml):

      ~~~ yaml
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: backend
        namespace: east
        labels:
          app: backend
        annotations:
          skupper.io/proxy: tcp
      spec:
        selector:
          matchLabels:
            app: backend
        replicas: 3
        template:
          metadata:
            labels:
              app: backend
          spec:
            containers:
              - name: backend
                image: quay.io/skupper/hello-world-backend
                ports:
                  - containerPort: 8080
      ~~~

      Now we're ready to apply everything.  Use `kubectl apply`
      command with the resource definitions for each site.
    commands:
      west:
        - run: kubectl apply -f west/frontend.yaml -f west/skupper.yaml -f west/site.yaml
          output: |
            namespace/west created
            deployment.apps/frontend created
            service/frontend created
            serviceaccount/skupper-site-controller created
            role.rbac.authorization.k8s.io/skupper-site-controller created
            rolebinding.rbac.authorization.k8s.io/skupper-site-controller created
            deployment.apps/skupper-site-controller created
            configmap/skupper-site created
        - await_external_ip: service/skupper
      east:
        - run: kubectl apply -f east/backend.yaml -f east/skupper.yaml -f east/site.yaml
          output: |
            namespace/east created
            deployment.apps/backend created
            serviceaccount/skupper-site-controller created
            role.rbac.authorization.k8s.io/skupper-site-controller created
            rolebinding.rbac.authorization.k8s.io/skupper-site-controller created
            deployment.apps/skupper-site-controller created
            configmap/skupper-site created
  - standard: link_your_namespaces
    preamble: |
      You can configure sites and service bindings declaratively, but
      linking sites is different.  To create a link, you must have the
      authentication secret and connection details of the remote site.
      Since these cannot be known in advance, linking must be
      procedural.

      **Note:** There are several ways to automate the generation and
      distribution of tokens across sites, using for example Ansible,
      Backstage, or Vault.  See [Token distribution]() for more
      information.

      This example uses the Skupper command line tool to generate the
      secret token in west and create the link in east.

      To install the Skupper command:

      ~~~ shell
      curl https://skupper.io/install.sh | sh
      ~~~

      For more installation options, see [Installing
      Skupper][install].

      Once the command is installed, use `skupper token create` in
      west to generate the token.  Then, use `skupper link create` in
      east to create a link.

      [install]: https://skupper.io/install/index.html
  - standard: test_the_application
  - standard: cleaning_up
    commands:
      west:
        - run: kubectl delete -f west/frontend.yaml -f west/skupper.yaml -f west/site.yaml
      east:
        - run: kubectl delete -f east/backend.yaml -f east/skupper.yaml -f east/site.yaml
