title: Skupper Hello World with YAML
subtitle: A minimal HTTP application deployed across Kubernetes clusters using Skupper
github_actions_url: https://github.com/ssorj/skupper-example-yaml/actions/workflows/main.yaml
overview: |
  This example is a variant of [Skupper Hello World][hello-world] that
  is deployed using YAML resource definitions instead of imperative
  commands.

  It contains two services:

  * A backend service that exposes an `/api/hello` endpoint.  It
    returns greetings of the form `Hi, <your-name>.  I am <my-name>
    (<pod-name>)`.

  * A frontend service that sends greetings to the backend and
    fetches new greetings in response.

  Skupper enables you to place the backend in one cluster and the
  frontend in another and maintain connectivity between the two
  services without exposing the backend to the public internet.

  <img src="images/entities.svg" width="640"/>

  [hello-world]: https://github.com/skupperproject/skupper-example-hello-world
sites:
  site-1:
    title: site 1
    platform: kubernetes
    namespace: site-1
    env:
      KUBECONFIG: ~/.kube/config-site-1
  site-2:
    title: site 2
    platform: kubernetes
    namespace: site-2
    env:
      KUBECONFIG: ~/.kube/config-site-2
steps:
  - standard: configure_separate_console_sessions
  - standard: access_your_clusters
  - standard: set_up_your_namespaces
  - title: Install Skupper in your namespaces
    preamble: |
      Use the `kubectl apply` command to install the Skupper router
      and controller in each namespace.

      **Note:** If you are using Minikube, [you need to start `minikube
      tunnel`][minikube-tunnel] before you install Skupper.

      [minikube-tunnel]: https://skupper.io/start/minikube.html#running-minikube-tunnel
    commands:
      site-1:
        - run: kubectl apply -f skupper.yaml
      site-2:
        - run: kubectl apply -f skupper.yaml
  - title: Apply your YAML resources
    preamble: |
      To configure our example sites and service bindings, we are
      using the following resources:

      Site 1:

      * [site.yaml](site-1/site.yaml) - Skupper configuration for site 1
      * [frontend.yaml](site-1/frontend.yaml) - The Hello World frontend

      Site 2:

      * [site.yaml](site-2/site.yaml) - Skupper configuration for site 2
      * [backend.yaml](site-2/backend.yaml) - The Hello World backend

      Let's look at some of these resources in more detail.

      #### Resources in site 1

      The `site` ConfigMap defines a Skupper site for its associated
      Kubernetes namespace.  This is where you set site configuration
      options.  We are setting the `console` and `flow-collector`
      options here in order to enable the console.  See the [config
      reference][config] for more information.

      [config]: https://skupper.io/docs/declarative/index.html

      [site.yaml](site-1/site.yaml):

      ~~~ yaml
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: skupper-site
      data:
        name: site-1
        console: "true"
        flow-collector: "true"
      ~~~

      #### Resources in site 2

      Like the one for site 1, here is the Skupper site definition for
      the site 2.  It includes the `ingress: "false"` setting since no
      ingress is required at this site for the Hello World example.

      [site.yaml](site-2/site.yaml):

      ~~~ yaml
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: skupper-site
      data:
        name: site-2
        ingress: "false"
      ~~~

      In site 2, the `backend` deployment has an annotation named
      `skupper.io/proxy` with the value `tcp`.  This tells Skupper to
      expose the backend on the Skupper network.  As a consequence,
      the frontend in site 1 will be able to see the backend and call
      its API.

      [backend.yaml](site-2/backend.yaml):

      <pre>apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: backend
        labels:
          app: backend
        <b>annotations:
          skupper.io/proxy: tcp</b>
      spec:
        selector:
          matchLabels:
            app: backend
        replicas: 3
        template:
          metadata:
            labels:
              app: backend
          spec:
            containers:
              - name: backend
                image: quay.io/skupper/hello-world-backend
                ports:
                  - containerPort: 8080</pre>

      Now we're ready to apply everything.  Use the `kubectl apply`
      command with the resource definitions for each site.
    commands:
      site-1:
        - run: kubectl apply -f site-1/site.yaml -f site-1/frontend.yaml
          output: |
            configmap/skupper-site created
            deployment.apps/frontend created
            service/frontend created
        - await_external_ip: service/skupper
      site-2:
        - run: kubectl apply -f site-2/site.yaml -f site-2/backend.yaml
          output: |
            configmap/skupper-site created
            deployment.apps/backend created
  - standard: link_your_namespaces
    preamble: |
      You can configure sites and service bindings declaratively, but
      linking sites is different.  To create a link, you must have the
      authentication secret and connection details of the remote site.
      Since these cannot be known in advance, linking must be
      procedural.

      **Note:** There are several ways to automate the generation and
      distribution of tokens across sites, using for example Ansible,
      Backstage, or Vault. <!-- See [Token distribution]() for more
      information. -->

      This example uses the Skupper command line tool to generate the
      secret token in site 1 and create the link in site 2.

      To install the Skupper command:

      ~~~ shell
      curl https://skupper.io/install.sh | sh
      ~~~

      For more installation options, see [Installing
      Skupper][install].

      Once the command is installed, use `skupper token create` in
      site 1 to generate the token.  Then, use `skupper link create` in
      site 2 to create a link.

      [install]: https://skupper.io/install/index.html
  # - standard: test_the_application
  # - standard: accessing_the_web_console
  - standard: cleaning_up
    commands:
      site-1:
        - run: kubectl delete -f site-1/site.yaml -f site-1/frontend.yaml
        - run: kubectl delete -f skupper.yaml
      site-2:
        - run: kubectl delete -f site-2/site.yaml -f site-2/backend.yaml
        - run: kubectl delete -f skupper.yaml
